<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-shung0625">https://github.com/mdecp2024/hw-shung0625</a></p>
<p>個人網站:<a href="https://github.com/mdecp2024/hw-shung0625">https://github.com/mdecp2024/hw-shung0625</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p></p>
<h3>w10</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/g2AkxcrwoG8" width="560"></iframe></p>
<p>問題一</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/jp0Zy-TJYC0" width="560"></iframe></p>
<p>問題二</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/zCRb02J8X_U" width="560"></iframe></p>
<p>問題三-1</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/HcB7fAcdST8" width="560"></iframe></p>
<p>題目三-2</p>
<h2>w7</h2>
<p><br/><br/><br/><br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/-MAWvA-JTCU" width="560"></iframe></p>
<h3>w11_hw</h3>
<p><a href="https://gist.githubusercontent.com/shung0625/375d5552bbd14a8a923ed5aad22b1408/raw/cc5edad52bd0f45f63c33c5d338f46d64a7d4412/hw2.py">題目二</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 建立畫布
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每格的像素大小
gs = 40  # 每格的像素數
ctx = canvas.getContext("2d")

# 繪製矩形格子
def dRect(lux, luy, w, h, s=1, c="#cccccc"):
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath()
    ctx.rect(lux, luy, w, h)
    ctx.stroke()

# 畫布上的網格
def grid(width, height, grid_pix):
    for i in range(width):
        for j in range(height):
            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")

# 填充圓形中的格子
def fill(x, y, color):
    ctx.fillStyle = color
    ctx.fillRect(x * gs, y * gs, gs, gs)

# 主程式：繪製圓形在 10x10 網格中
def draw_circle():
    grid(10, 10, gs)  # 建立網格
    center_x, center_y = 5, 5  # 圓心在 10x10 網格的中心
    radius = 4  # 半徑為 4 格

    for y in range(10):
        for x in range(10):
            # 計算到圓心的距離
            distance = ((x - center_x) ** 2 + (y - center_y) ** 2) ** 0.5
            # 如果距離小於半徑且接近邊界，填充該格
            if abs(distance - radius) &lt; 0.5:
                fill(x, y, "black")

# 繪製圓形
draw_circle()
</pre>
<p><span>此提解法與第一題大同小異 但問GPT的方式需要改變 產生的圖形也大不相同。</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/J4j8z3tRg60" width="560"></iframe></p>
<p><a href="https://gist.githubusercontent.com/shung0625/375d5552bbd14a8a923ed5aad22b1408/raw/cc5edad52bd0f45f63c33c5d338f46d64a7d4412/hw1.py">題目一</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import math

# 圓的中心和半徑
center_x, center_y = 5, 5  # 圓心 (以0開始計算，所以中心是(5,5))
radius = 4  # 半徑

# 創建10x10的字符矩陣
grid_size = 10
for y in range(grid_size):
    for x in range(grid_size):
        # 計算到圓心的距離
        distance = math.sqrt((x - center_x) ** 2 + (y - center_y) ** 2)
        # 如果距離接近半徑，打印 '*'
        if abs(distance - radius) &lt; 0.5:
            print('*', end='')
        else:
            print(' ', end='')
    print()  # 換行</pre>
<p><span>上個禮拜做w10的作業後讓我這禮拜w11做得更得心應手，有蠻多步驟是跟上禮拜題目是相關的，只要有確實製作相關的解題技巧與了解老師上課所解釋的東西，就更容易做出相關的題目。</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/SY9t5jhP6Yc" width="560"></iframe></p>
<h3>w12_hw</h3>
<p><a href="https://gist.githubusercontent.com/shung0625/ea2594fd5730073a3332e5234dc10bee/raw/b8454929a5b0f2f9a518ffab8b7b668afa564c73/hw.py">題目一</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">n=11 
space = '_'
center = n//2

for y in range(n):
    for x in range(n):
        print("(--++--++--)",sep="")
</pre>
<p></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/rgzhjTKpn0U" width="560"></iframe></span></p>
<p><span>第一題 :01_string_input_prin</span></p>
<p><span>input()範例程式 : <a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/ea2594fd5730073a3332e5234dc10bee/raw/df33da67b16af324dffc46b1b5bf682bd704d79b/hw12-1.py">你叫誰?</a></span></p>
<p><span>print()範例程式 : <a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/ea2594fd5730073a3332e5234dc10bee/raw/188015511b68a1739cdf0df3e0cfc1565a73d76a/hw12cat.py">貓咪</a></span></p>
<p><span></span></p>
<p><span></span>第二題 :02_variables</p>
<p>範例程式 : <a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/ea2594fd5730073a3332e5234dc10bee/raw/e87b6460cb52fffcbcf31b708c0dfae49d4efc90/hw12-2.py">填寫姓名</a></p>
<p>input()範例程式 : <a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/ea2594fd5730073a3332e5234dc10bee/raw/674d6e445dc677a374f8bff5850cabb4c093318c/12-2-2.py">你最喜歡的食物是什麼?</a></p>
<p></p>
<p>第三題 :03_list_if_in_else</p>
<p>範例程式 : <a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/ea2594fd5730073a3332e5234dc10bee/raw/0be854387fd67afd51bff2b2e1743c11e3df05f7/hw12-3.py">買書</a></p>
<p>如果有販賣想要的書 : 有!我們有賣</p>
<p>如果沒有我們要的書 : 抱歉，我們沒有賣你想要的書</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 初始化編程書籍列表
programming_books = ["Learn python", "Python for all", "Intro to python"]
print(programming_books)  # 輸出書籍清單
# 結果: ['Learn python', 'Python for all', 'Intro to python']

# 提示用戶輸入想購買的書籍名稱
wanted_book = input("Hi! What book would you like to buy?")  # 提示用戶輸入
print(wanted_book)  # 輸出用戶輸入的書籍名稱

# 檢查用戶想購買的書籍是否在列表中
if wanted_book in programming_books:  # 如果書籍在列表中
    print("Yes, we sell it!")  # 顯示賣該書籍的訊息
else:  # 如果書籍不在列表中
    print("Sorry, we don't sell that book")  # 顯示未賣該書籍的訊息
</pre>
<p></p>
<p>概要:</p>
<p><strong><code>input()</code></strong>：從用戶輸入獲取書籍名稱。</p>
<p><strong>條件檢查</strong>：</p>
<p>使用 <code>in</code> 判斷書籍是否存在於書籍清單中。</p>
<p><strong>動態反饋</strong>：</p>
<p>提供即時回應，讓用戶知道該書籍是否有售。</p>
<p></p>
<p></p>
<p>第四題 :04_list_append_remove</p>
<p>print()範例程式 : <a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/ea2594fd5730073a3332e5234dc10bee/raw/4cc432ad35219764904b0aa796c98469997b0102/hw12-4.py">購物清單</a></p>
<p>輸入自己需要的購物物品</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 初始化購物清單
shopping_list = ["carrots", "chocolate", "olives"]
print(shopping_list)  # 輸出完整購物清單
# 結果: ['carrots', 'chocolate', 'olives']

# 要求用戶輸入新的購物項目
new_item = input("What else do I have to buy?")  # 提示用戶輸入要添加的物品

# 檢查新物品是否已在清單中
if new_item in shopping_list:  # 如果新物品在清單中
    print(new_item + " is/are already in the shopping list")  # 輸出已存在的訊息
    print(shopping_list)  # 再次輸出購物清單
else:  # 如果新物品不在清單中
    shopping_list.append(new_item)  # 將新物品添加到清單末尾
    print(shopping_list)  # 輸出更新後的購物清單

# 要求用戶輸入要移除的物品
item_to_remove = input("What do I have to remove?")  # 提示用戶輸入要移除的物品

# 檢查要移除的物品是否在清單中
if item_to_remove in shopping_list:  # 如果物品在清單中
    shopping_list.remove(item_to_remove)  # 從清單中移除該物品
    print(shopping_list)  # 輸出更新後的購物清單
else:  # 如果物品不在清單中
    print(item_to_remove + " is/are not in the list")  # 輸出不存在的訊息
    print(shopping_list)  # 再次輸出購物清單
</pre>
<p></p>
<p>概要:</p>
<p><strong><code>input()</code></strong>：從用戶輸入獲取新物品或要移除的物品名稱。</p>
<p><strong>條件檢查</strong>：</p>
<p>使用 <code>in</code> 檢查物品是否存在於列表中。</p>
<p><strong>列表操作</strong>：</p>
<p><code>.append()</code> 用於新增物品。</p>
<p><code>.remove()</code> 用於移除物品，僅當物品存在時有效。</p>
<p><strong>用戶交互</strong>：提供即時反饋，告知用戶物品是否已存在或被成功移除。</p>
<p></p>
<p></p>
<p>第五題 :05_list_index_pop_insert</p>
<p>範例程式 : <a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/ea2594fd5730073a3332e5234dc10bee/raw/bfc7934d3538b14e7a5f28029b4979b57f0eb78a/hw-5.py">點菜</a></p>
<p>對於菜單其他配菜感到興趣，於是想要修改菜單中的配菜</p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 初始化今日菜單列表
todays_menu = ["burger", "salad", "coke"]
print(todays_menu)  # 輸出完整的菜單列表
# 結果: ['burger', 'salad', 'coke']

# 找到 "salad" 的索引位置
side_dish_index = todays_menu.index("salad")  # 獲取 "salad" 的索引
print(side_dish_index)  # 輸出 "salad" 的索引位置
# 結果: 1

# 根據索引移除 "salad"
todays_menu.pop(side_dish_index)  # 移除索引 1 的元素（即 "salad"）
print(todays_menu)  # 輸出移除 "salad" 後的列表
# 結果: ['burger', 'coke']

# 在原索引位置插入 "fries"
todays_menu.insert(side_dish_index, "fries")  # 在索引 1 插入 "fries"
print(todays_menu)  # 輸出插入 "fries" 後的列表
# 結果: ['burger', 'fries', 'coke']
</pre>
<p></p>
<p>概要:</p>
<p><strong><code>index()</code></strong>：用於查找元素的索引位置。</p>
<p><strong><code>pop()</code></strong>：用於根據索引移除列表中的元素，並更新列表。</p>
<p><strong><code>insert()</code></strong>：用於在指定索引位置插入新元素。</p>
<p><strong>列表操作順序性</strong>：通過索引操作，保證列表元素在移除或插入後的正確位置。</p>
<p></p>
<p></p>
<p>第六題 :06_list_slicing</p>
<p>範例程式 : <a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/ea2594fd5730073a3332e5234dc10bee/raw/2cd0a02f0c641674f2d899cf0cbeb2e3ad4c5628/hw12-6.py">城市</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 初始化城市列表
cities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"]
print(cities)  # 輸出整個列表
# 結果: ['San Diego', 'Prague', 'Cape Town', 'Tokyo', 'Melbourne']

# 取得索引 1 的元素
print(cities[1])  # 輸出索引 1 的元素（第二個城市）
# 結果: 'Prague'

# 切片操作，取得索引 1 到 3 的元素（不包含索引 4）
print(cities[1:4])  # 從索引 1 到索引 4（不含），提取子列表
# 結果: ['Prague', 'Cape Town', 'Tokyo']

# 切片操作，從索引 1 到 4，每隔 2 個元素提取一次
print(cities[1:4:2])  # 從索引 1 開始，每隔 2 個取一次
# 結果: ['Prague', 'Tokyo']

# 取得索引 0 到 2 的元素
print(cities[0:3])  # 從索引 0 到索引 3（不含），提取子列表
# 結果: ['San Diego', 'Prague', 'Cape Town']

# 切片操作，省略起始索引，默認從索引 0 開始
print(cities[:3])  # 提取索引 0 到索引 3（不含）
# 結果: ['San Diego', 'Prague', 'Cape Town']

# 切片操作，取得索引 2 到列表結尾的元素
print(cities[2:5])  # 從索引 2 開始，提取到結尾
# 結果: ['Cape Town', 'Tokyo', 'Melbourne']

# 切片操作，省略結束索引，提取從索引 2 到結尾的元素
print(cities[2:])  # 從索引 2 開始，提取到列表結尾
# 結果: ['Cape Town', 'Tokyo', 'Melbourne']

# 切片操作，從索引 0 到索引 5，每隔 2 個提取一次
print(cities[0:5:2])  # 從索引 0 開始，每隔 2 個取一次
# 結果: ['San Diego', 'Cape Town', 'Melbourne']

# 切片操作，從列表頭到尾，每隔 2 個提取一次
print(cities[::2])  # 從頭到尾，每隔 2 個取一次
# 結果: ['San Diego', 'Cape Town', 'Melbourne']

# 取得索引 4 的元素
print(cities[4])  # 提取列表中索引 4 的元素（最後一個城市）
# 結果: 'Melbourne'

# 使用負索引提取最後一個元素
print(cities[-1])  # 使用負索引提取最後一個元素
# 結果: 'Melbourne'

# 切片操作，使用負索引提取倒數第 4 到倒數第 2 的元素
print(cities[-4:-1])  # 從倒數第 4 個到倒數第 1 個（不含倒數第 1 個）
# 結果: ['Prague', 'Cape Town', 'Tokyo']

# 切片操作，索引 3 到 1 反向提取
cities[3:0:-1]  # 從索引 3 到索引 1，反向提取
# 結果: ['Tokyo', 'Cape Town', 'Prague']

# 切片操作，使用負索引反向提取倒數第 2 到倒數第 5 的元素
cities[-2:-5:-1]  # 從倒數第 2 到倒數第 5，反向提取
# 結果: ['Tokyo', 'Cape Town', 'Prague']

# 反轉整個列表
print(cities[::-1])  # 從尾到頭反轉整個列表
# 結果: ['Melbourne', 'Tokyo', 'Cape Town', 'Prague', 'San Diego']
</pre>
<p></p>
<p><strong>概要:</strong></p>
<p><strong>索引與切片</strong>：</p>
<p><code>cities[start:end]</code> 提取從 <code>start</code> 到 <code>end</code>（不包含 <code>end</code>）的子列表。</p>
<p><code>cities[start:end:step]</code> 添加步長參數，每隔 <code>step</code> 個元素提取一次。</p>
<p><strong>負索引:</strong></p>
<p>負數索引用來從列表尾部開始計數，例如 <code>-1</code> 表示最後一個元素。</p>
<p><strong>反向切片</strong>：當步長為負數（如 <code>-1</code>）時，列表會反向提取元素。</p>
<p></p>
<p>第七題 :07_list_slicing_use</p>
<p>範例程式 : <a href="https://gist.githubusercontent.com/shung0625/ea2594fd5730073a3332e5234dc10bee/raw/523e250ad28e6b2482f6f5ea0155646f5463f7aa/hw12-7.py">列表操作</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">senses = ["eyes", "nose", "ears", "tongue", "skin"]
senses[1] = "smell"  # 替換第 2 個元素為 "smell"
senses[3:5] = ["taste", "touch"]  # 替換第 4-5 個元素為 "taste" 和 "touch"
senses[0:3:2] = ["sight", "hearing"]  # 修改索引 0 和 2 為 "sight" 和 "hearing"
planets = ["Mercury", "Mars", "Earth", "Neptune"]
planets = planets + ["Jupiter"]  # 新增 "Jupiter"
planets = planets[0:2] + ["Venus"] + planets[2:5]  # 插入 "Venus" 在第 3 個位置
planets = planets[:5] + ["Uranus", "Saturn"] + planets[5:]  # 插入 "Uranus" 和 "Saturn"
house = ["kitchen", "dining room", "living room", "bedroom", "bathoom", "garden", "balcony", "terrace"]
del house[1]  # 刪除索引 1 的元素
del house[4:6]  # 刪除索引 4-5 的元素
del house[::2]  # 刪除所有偶數索引的元素
del house  # 刪除整個列表
</pre>
<p></p>
<p>概要:</p>
<p><strong>列表修改</strong>：可透過索引或切片直接修改列表內容。</p>
<p><strong>新增元素</strong>：使用 <code>+</code> 合併列表以新增元素。</p>
<p><strong>刪除操作</strong>：<code>del</code> 可用於刪除特定元素、切片，或整個列表。</p>
<p><strong>錯誤提示</strong>：刪除列表後再使用會引發錯誤，因為變數已不存在。</p>
<p></p>
<p></p>
<p>第八題 :08_for_range</p>
<p>範例程式 : <a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/ea2594fd5730073a3332e5234dc10bee/raw/aab5e888e0783cd966b7cd337a13b4dae567f585/hw12-8.py">朋友名單與菜餚清單</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 初始化朋友的名字列表
friends = ["Geetha", "Luca", "Daisy", "Juhan"]
# 初始化每位朋友喜愛的菜品列表
dishes  = ["sushi", "burgers", "tacos", "pizza"]

# 輸出朋友的名字
print("My friends' names are:")  # 顯示標題：我的朋友們的名字
print(friends)  # 列印整個朋友列表

# 使用 for 迴圈逐一列出朋友的索引與名字
for index in range(0, 4):  # range(0,4) 表示索引從 0 到 3
    print("index:  " + str(index))  # 顯示目前的索引
    print("friend: " + friends[index])  # 顯示對應索引的朋友名字

# 輸出每位朋友喜愛的菜品
print("Their favorite dishes are:")  # 顯示標題：他們喜愛的菜品
print(dishes)  # 列印整個菜品列表

# 使用 for 迴圈逐一列出菜品的索引與名稱
for index in range(0, 4):  # 同樣索引從 0 到 3
    print("index:  " + str(index))  # 顯示目前的索引
    print("dish: " + dishes[index])  # 顯示對應索引的菜品名稱

# 將朋友與他們喜愛的菜品結合輸出
for index in range(0, 4):  # 遍歷索引從 0 到 3
    # 結合朋友名字與菜品形成完整句子
    print("My friend " + friends[index] + "'s favorite dish is " + dishes[index])  
    # 中文解釋：我的朋友 {朋友名字} 最喜歡的菜是 {菜品名稱}
</pre>
<p><br/><span></span></p>
<p>概要:</p>
<p><strong>列表與索引</strong>：透過索引連結兩個列表的內容。</p>
<p><strong>迴圈應用</strong>：使用 <code>for</code> 迴圈來逐一處理列表元素。</p>
<p><strong>輸出格式化</strong>：串接文字和變數形成完整句子。</p>
<p></p>
<p>第九題 :09_for_loop_if_equals</p>
<p>範例程式 : <a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/ea2594fd5730073a3332e5234dc10bee/raw/5c181369ad09c8a0493bf4f86c596ebbd8ce6314/hw12-9.py">動物園</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 初始化動物列表
animals = ["giraffe", "penguin", "dolphin"]
print(animals)  # 輸出整個動物列表

# 遍歷列表中的每個位置
for i in range(0, len(animals)):  # 使用 range 與 len 遍歷列表索引
    print("-- Beginning of loop --")  # 提示進入迴圈
    # 輸出每個元素及其索引位置
    print("The element in position " + str(i) + " is " + animals[i])  
    # 中文解釋：位置 {i} 的元素是 {animals[i]}

# 定義想看的動物
wanted_to_see = "penguin"  # 想看的動物是 "penguin"

# 再次遍歷列表中的每個位置
for i in range(0, len(animals)):  # 同樣遍歷列表索引
    # 如果當前的動物是想看的動物
    if animals[i] == wanted_to_see:
        # 輸出符合期待的訊息
        print("I saw a " + animals[i] + " and I really wanted to see it!")
        # 中文解釋：我看到了 {animals[i]}，這正是我想看的！
    # 如果當前的動物不是想看的
    else:
        # 輸出普通的看到訊息
        print("I saw a " + animals[i])
        # 中文解釋：我看到了 {animals[i]}
</pre>
<p></p>
<p>概要:</p>
<p><strong>列表操作</strong>：</p>
<p><code>range</code> 與 <code>len</code> 結合，遍歷列表中的每個索引。</p>
<p><strong>條件判斷</strong>：</p>
<p>使用 <code>if</code> 判斷當前的元素是否為想看的動物。</p>
<p><strong>輸出格式</strong>：</p>
<p>根據條件輸出不同訊息，強調看到的動物是否符合期待。</p>
<p></p>
<p>第十題:10_for_search</p>
<p>程式範例 : <a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/ea2594fd5730073a3332e5234dc10bee/raw/1d3c51c7c72a3c7078f8d944901d61a895bfea3c/hw12-10.py">關於手套</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 初始化配件列表
accessories = ["belt", "hat", "gloves", "sunglasses", "ring"]
print(accessories)  # 輸出整個配件列表
# 結果: ['belt', 'hat', 'gloves', 'sunglasses', 'ring']

# 遍歷每個元素及其索引
for i in range(len(accessories)):  # 使用 len(accessories) 獲取列表長度
    # 輸出每個元素及其索引
    print("The element " + accessories[i] + " is in position " + str(i))
# 結果: 
# The element belt is in position 0
# The element hat is in position 1
# The element gloves is in position 2
# The element sunglasses is in position 3
# The element ring is in position 4

# 檢查元素的長度是否等於 6
for i in range(len(accessories)):
    if len(accessories[i]) == 6:  # 如果元素長度為 6
        print("The element " + accessories[i] + " is in position " + str(i) + " and it has 6 characters")
# 結果: 
# The element gloves is in position 2 and it has 6 characters

# 檢查元素的長度是否小於 6
for i in range(len(accessories)):
    if len(accessories[i]) &lt; 6:  # 如果元素長度小於 6
        print("The element " + accessories[i] + " is in position " + str(i) + " and it has less than 6 characters")
# 結果:
# The element belt is in position 0 and it has less than 6 characters
# The element hat is in position 1 and it has less than 6 characters
# The element ring is in position 4 and it has less than 6 characters

# 設定長度閾值
n_of_characters = 6
for i in range(len(accessories)):
    if len(accessories[i]) &gt; n_of_characters:  # 如果元素長度大於 6
        print("The element " + accessories[i] + " is in position " + str(i) + " and it has more than " + str(n_of_characters) + " characters")
# 結果:
# The element sunglasses is in position 3 and it has more than 6 characters

# 檢查元素長度是否不等於 6
for i in range(len(accessories)):
    if len(accessories[i]) != n_of_characters:  # 如果元素長度不等於 6
        print("The element " + accessories[i] + " is in position " + str(i) + " and it has a number of characters different from " + str(n_of_characters))
# 結果:
# The element belt is in position 0 and it has a number of characters different from 6
# The element hat is in position 1 and it has a number of characters different from 6
# The element sunglasses is in position 3 and it has a number of characters different from 6
# The element ring is in position 4 and it has a number of characters different from 6

# 設定索引閾值
position = 2
for i in range(len(accessories)):
    if i &lt;= position:  # 如果索引小於或等於閾值
        print("The element " + accessories[i] + " is in position " + str(i) + ", which is less than or equal to " + str(position))
# 結果:
# The element belt is in position 0, which is less than or equal to 2
# The element hat is in position 1, which is less than or equal to 2
# The element gloves is in position 2, which is less than or equal to 2

# 檢查索引是否大於或等於閾值
for i in range(len(accessories)):
    if i &gt;= position:  # 如果索引大於或等於閾值
        print("The element " + accessories[i] + " is in position " + str(i) + ", which is at least " + str(position))
# 結果:
# The element gloves is in position 2, which is at least 2
# The element sunglasses is in position 3, which is at least 2
# The element ring is in position 4, which is at least 2
</pre>
<p></p>
<p>概要:</p>
<p><strong><code>len()</code></strong>：用於計算元素的字元長度。</p>
<p><strong>條件判斷</strong>：</p>
<p>使用 <code>==</code>, <code>&lt;</code>, <code>&gt;</code>, <code>!=</code> 判斷長度或索引是否符合條件。</p>
<p><strong>索引操作</strong>：</p>
<p>使用 <code>for i in range(len(accessories))</code> 遍歷列表的每個索引，實現條件檢查和操作。</p>
<p><strong>靈活的閾值設置</strong>：</p>
<p>可動態調整長度或索引的閾值，控制輸出內容。</p>
<p></p>
<div class="flex-1 overflow-hidden @container/thread">
<div class="h-full">
<div class="react-scroll-to-bottom--css-gzkgo-79elbk h-full">
<div class="react-scroll-to-bottom--css-gzkgo-1n7m0yu">
<div class="flex flex-col text-sm md:pb-9">
<article class="w-full scroll-mb-[var(--thread-trailing-height,150px)] text-token-text-primary focus-visible:outline-2 focus-visible:outline-offset-[-4px]" data-scroll-anchor="true" data-testid="conversation-turn-19" dir="auto">
<div class="m-auto text-base py-[18px] px-3 md:px-4 w-full md:px-5 lg:px-4 xl:px-5">
<div class="mx-auto flex flex-1 gap-4 text-base md:gap-5 lg:gap-6 md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]">
<div class="group/conversation-turn relative flex w-full min-w-0 flex-col agent-turn">
<div class="flex-col gap-1 md:gap-3">
<div class="mb-2 flex gap-3 empty:hidden -ml-2">
<div class="items-center justify-start rounded-xl p-1 flex">
<div class="flex items-center"><span class="" data-state="closed"><button aria-label="Read aloud" class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary" data-testid="voice-play-turn-action-button"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg class="icon-md-heavy" fill="none" height="24" viewbox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M11 4.9099C11 4.47485 10.4828 4.24734 10.1621 4.54132L6.67572 7.7372C6.49129 7.90626 6.25019 8.00005 6 8.00005H4C3.44772 8.00005 3 8.44776 3 9.00005V15C3 15.5523 3.44772 16 4 16H6C6.25019 16 6.49129 16.0938 6.67572 16.2629L10.1621 19.4588C10.4828 19.7527 11 19.5252 11 19.0902V4.9099ZM8.81069 3.06701C10.4142 1.59714 13 2.73463 13 4.9099V19.0902C13 21.2655 10.4142 22.403 8.81069 20.9331L5.61102 18H4C2.34315 18 1 16.6569 1 15V9.00005C1 7.34319 2.34315 6.00005 4 6.00005H5.61102L8.81069 3.06701ZM20.3166 6.35665C20.8019 6.09313 21.409 6.27296 21.6725 6.75833C22.5191 8.3176 22.9996 10.1042 22.9996 12.0001C22.9996 13.8507 22.5418 15.5974 21.7323 17.1302C21.4744 17.6185 20.8695 17.8054 20.3811 17.5475C19.8927 17.2896 19.7059 16.6846 19.9638 16.1962C20.6249 14.9444 20.9996 13.5175 20.9996 12.0001C20.9996 10.4458 20.6064 8.98627 19.9149 7.71262C19.6514 7.22726 19.8312 6.62017 20.3166 6.35665ZM15.7994 7.90049C16.241 7.5688 16.8679 7.65789 17.1995 8.09947C18.0156 9.18593 18.4996 10.5379 18.4996 12.0001C18.4996 13.3127 18.1094 14.5372 17.4385 15.5604C17.1357 16.0222 16.5158 16.1511 16.0539 15.8483C15.5921 15.5455 15.4632 14.9255 15.766 14.4637C16.2298 13.7564 16.4996 12.9113 16.4996 12.0001C16.4996 10.9859 16.1653 10.0526 15.6004 9.30063C15.2687 8.85905 15.3578 8.23218 15.7994 7.90049Z" fill="currentColor" fill-rule="evenodd"></path></svg></span></button></span><span class="" data-state="closed"><button aria-label="複製" class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary" data-testid="copy-turn-action-button"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg class="icon-md-heavy" fill="none" height="24" viewbox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M7 5C7 3.34315 8.34315 2 10 2H19C20.6569 2 22 3.34315 22 5V14C22 15.6569 20.6569 17 19 17H17V19C17 20.6569 15.6569 22 14 22H5C3.34315 22 2 20.6569 2 19V10C2 8.34315 3.34315 7 5 7H7V5ZM9 7H14C15.6569 7 17 8.34315 17 10V15H19C19.5523 15 20 14.5523 20 14V5C20 4.44772 19.5523 4 19 4H10C9.44772 4 9 4.44772 9 5V7ZM5 9C4.44772 9 4 9.44772 4 10V19C4 19.5523 4.44772 20 5 20H14C14.5523 20 15 19.5523 15 19V10C15 9.44772 14.5523 9 14 9H5Z" fill="currentColor" fill-rule="evenodd"></path></svg></span></button></span>
<div class="flex"><span class="" data-state="closed"><button aria-label="回應良好" class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary" data-testid="good-response-turn-action-button"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg class="icon-md-heavy" fill="none" height="24" viewbox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M12.1318 2.50389C12.3321 2.15338 12.7235 1.95768 13.124 2.00775L13.5778 2.06447C16.0449 2.37286 17.636 4.83353 16.9048 7.20993L16.354 8.99999H17.0722C19.7097 8.99999 21.6253 11.5079 20.9313 14.0525L19.5677 19.0525C19.0931 20.7927 17.5124 22 15.7086 22H6C4.34315 22 3 20.6568 3 19V12C3 10.3431 4.34315 8.99999 6 8.99999H8C8.25952 8.99999 8.49914 8.86094 8.6279 8.63561L12.1318 2.50389ZM10 20H15.7086C16.6105 20 17.4008 19.3964 17.6381 18.5262L19.0018 13.5262C19.3488 12.2539 18.391 11 17.0722 11H15C14.6827 11 14.3841 10.8494 14.1956 10.5941C14.0071 10.3388 13.9509 10.0092 14.0442 9.70591L14.9932 6.62175C15.3384 5.49984 14.6484 4.34036 13.5319 4.08468L10.3644 9.62789C10.0522 10.1742 9.56691 10.5859 9 10.8098V19C9 19.5523 9.44772 20 10 20ZM7 11V19C7 19.3506 7.06015 19.6872 7.17071 20H6C5.44772 20 5 19.5523 5 19V12C5 11.4477 5.44772 11 6 11H7Z" fill="currentColor" fill-rule="evenodd"></path></svg></span></button></span><span class="" data-state="closed"><button aria-label="回應不佳" class="rounded-lg text-token-text-secondary hover:bg-token-main-surface-secondary" data-testid="bad-response-turn-action-button"><span class="flex h-[30px] w-[30px] items-center justify-center"><svg class="icon-md-heavy" fill="none" height="24" viewbox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M11.8727 21.4961C11.6725 21.8466 11.2811 22.0423 10.8805 21.9922L10.4267 21.9355C7.95958 21.6271 6.36855 19.1665 7.09975 16.7901L7.65054 15H6.93226C4.29476 15 2.37923 12.4921 3.0732 9.94753L4.43684 4.94753C4.91145 3.20728 6.49209 2 8.29589 2H18.0045C19.6614 2 21.0045 3.34315 21.0045 5V12C21.0045 13.6569 19.6614 15 18.0045 15H16.0045C15.745 15 15.5054 15.1391 15.3766 15.3644L11.8727 21.4961ZM14.0045 4H8.29589C7.39399 4 6.60367 4.60364 6.36637 5.47376L5.00273 10.4738C4.65574 11.746 5.61351 13 6.93226 13H9.00451C9.32185 13 9.62036 13.1506 9.8089 13.4059C9.99743 13.6612 10.0536 13.9908 9.96028 14.2941L9.01131 17.3782C8.6661 18.5002 9.35608 19.6596 10.4726 19.9153L13.6401 14.3721C13.9523 13.8258 14.4376 13.4141 15.0045 13.1902V5C15.0045 4.44772 14.5568 4 14.0045 4ZM17.0045 13V5C17.0045 4.64937 16.9444 4.31278 16.8338 4H18.0045C18.5568 4 19.0045 4.44772 19.0045 5V12C19.0045 12.5523 18.5568 13 18.0045 13H17.0045Z" fill="currentColor" fill-rule="evenodd"></path></svg></span></button></span></div>
<span class="hidden"></span>
<div class="flex items-center pb-0"><svg class="icon-md" fill="none" height="24" viewbox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M3.06957 10.8763C3.62331 6.43564 7.40967 3 12 3C14.2824 3 16.4028 3.85067 18.0118 5.25439V4C18.0118 3.44772 18.4595 3 19.0118 3C19.5641 3 20.0118 3.44772 20.0118 4V8C20.0118 8.55228 19.5641 9 19.0118 9H15C14.4477 9 14 8.55228 14 8C14 7.44772 14.4477 7 15 7H16.9571C15.6757 5.76379 13.9101 5 12 5C8.43108 5 5.48466 7.67174 5.0542 11.1237C4.98586 11.6718 4.48619 12.0607 3.93815 11.9923C3.39011 11.924 3.00123 11.4243 3.06957 10.8763ZM20.0618 12.0077C20.6099 12.076 20.9988 12.5757 20.9304 13.1237C20.3767 17.5644 16.5903 21 12 21C9.72322 21 7.60762 20.1535 5.99999 18.7559V20C5.99999 20.5523 5.55228 21 4.99999 21C4.44771 21 3.99999 20.5523 3.99999 20V16C3.99999 15.4477 4.44771 15 4.99999 15H8.99999C9.55228 15 9.99999 15.4477 9.99999 16C9.99999 16.5523 9.55228 17 8.99999 17H7.04285C8.32433 18.2362 10.0899 19 12 19C15.5689 19 18.5153 16.3283 18.9458 12.8763C19.0141 12.3282 19.5138 11.9393 20.0618 12.0077Z" fill="currentColor"></path></svg><span class="overflow-hidden text-clip whitespace-nowrap text-sm"></span><svg class="icon-sm" fill="none" height="24" viewbox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" d="M5.29289 9.29289C5.68342 8.90237 6.31658 8.90237 6.70711 9.29289L12 14.5858L17.2929 9.29289C17.6834 8.90237 18.3166 8.90237 18.7071 9.29289C19.0976 9.68342 19.0976 10.3166 18.7071 10.7071L12.7071 16.7071C12.5196 16.8946 12.2652 17 12 17C11.7348 17 11.4804 16.8946 11.2929 16.7071L5.29289 10.7071C4.90237 10.3166 4.90237 9.68342 5.29289 9.29289Z" fill="currentColor" fill-rule="evenodd"></path></svg></div>
</div>
</div>
</div>
<div class="pr-2 lg:pr-0"></div>
<div class="mt-3 w-full empty:hidden">
<div class="text-center"></div>
</div>
</div>
<div class="absolute"></div>
</div>
</div>
</div>
</article>
</div>
</div>
</div>
</div>
</div>
<h3>w13_hw</h3>
<p>題目一 課堂作業</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 繪製對角線，顏色設定為藍色
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath() 
ctx.moveTo(10, 10)
ctx.lineTo(210, 210)  # 第一條對角線
ctx.stroke()</pre>
<p><img alt="" height="194" src="/images/螢幕擷取畫面 2024-12-05 151822.png" width="197"/></p>
<p><a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/9b67f0b94b5a6673f9d786929f003758/raw/37e4dd31bc318b4e4ab64e64706883db844bfae4/w13.py">題目二</a> 回家作業</p>
<p>失敗的答案</p>
<p><img alt="" height="152" src="/images/螢幕擷取畫面 2024-12-05 193243.png" width="184"/></p>
<p><span>應老師要求設法在各線條所圍成的封閉區域塗上不同顏色，但問了約20次且問法皆有改變，卻還是無法生成出每個區域都有不同顏色的指令，代表著現今AI發展雖然進步飛快，但目前技術還是無法生成出過於複雜的指令，還需要再觀摩個幾年等待，讓AI科技變得更成熟。</span></p>
<p><span>補貼正確的答案</span></p>
<p><span><img alt="" height="151" src="/images/螢幕擷取畫面 2024-12-11 165544.png" width="164"/></span></p>
<p><a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/9b67f0b94b5a6673f9d786929f003758/raw/74c17a9006770970409d95b63f3f14c1bc3f2265/w13.2py">正確答案程式碼</a></p>
<pre>from browser import html
from browser import document as doc
import math
  
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas
  
ctx = canvas.getContext("2d")
ctx.lineWidth = 4
 
#混色的
ctx.globalCompositeOperation = "screem"
 
 
#黑邊圓*2(每個畫四個邊邊)
ctx.strokeStyle = 'black'
#第一個圓
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi,0.75 * math.pi)
ctx.fillStyle = "Turquoise"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi,1.25 * math.pi)
ctx.fillStyle = "Tomato"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi,1.75 * math.pi)
ctx.fillStyle = "SpringGreen"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi,0.25 * math.pi)
ctx.fillStyle = "FloralWhite"
ctx.fill()
ctx.stroke()
 
#第二個圓
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi,1.75 * math.pi)
ctx.fillStyle = "Purple"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi,0.25 * math.pi)
ctx.fillStyle = "OliveDrab"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(260, 260, 141, 0.25 * math.pi,0.75 * math.pi)
ctx.fillStyle = "Orange"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.arc(260, 260, 141, 0.75 * math.pi,1.25 * math.pi)
ctx.fillStyle = "MediumVioletRed"
ctx.fill()
ctx.stroke()
 
 
#紅方形*2(4個三角形)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(60,60)
ctx.lineTo(60,260)
ctx.lineTo(260,260)
ctx.fillStyle = "Gold"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.moveTo(60,60)
ctx.lineTo(260,60)
ctx.lineTo(260,260)
ctx.fillStyle = "Indigo"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(360,160)
ctx.lineTo(360,360)
ctx.fillStyle = "Cyan"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(160,360)
ctx.lineTo(360,360)
ctx.fillStyle = "SpringGreen"
ctx.fill()
ctx.stroke()
 
  
#重疊的小方型
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(160,260)
ctx.lineTo(260,260)
ctx.fillStyle = "Turquoise"
ctx.fill()
ctx.stroke()
 
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(260,160)
ctx.lineTo(260,260)
ctx.fillStyle = "SlateBlue"
ctx.fill()
ctx.stroke()
 
 
#籃斜線
ctx.strokeStyle = 'blue'
ctx.beginPath() 
ctx.moveTo(60, 60)
ctx.lineTo(260, 260)
ctx.stroke()</pre>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/VYHIkP1-1ws" width="560"></iframe></p>
<h3>h15_hw</h3>
<p>題目一</p>
<p><a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/0a83bbfde3a2d6dbecaa9e84b80a9f8b/raw/ef9ce937e846a70ee339a1f265f49eec41ecc84a/w15-1">anchor</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 計算從 1 累加到 100 的總和
total = sum(range(1, 101))
print(f"從 1 累加到 100 的總和是：{total}")</pre>
<p></p>
<p>題目二</p>
<p><a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/0a83bbfde3a2d6dbecaa9e84b80a9f8b/raw/48b0d0068535b981cd6530b8fdb74739ca7fd48b/w15-2">addto</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義函式 addto，用於計算從 start 到 end 的累加
def addto(start, end):
    """
    計算從 start 到 end 的總和
    :param start: 起始數字
    :param end: 結束數字
    :return: 累加結果
    """
    return sum(range(start, end + 1))

# 測試函式
result = addto(1, 100)
print(f"從 1 累加到 100 的總和是：{result}")</pre>
<p>程式碼解釋與概要:<strong>函式 <code>addto</code></strong>:</p>
<p>接受兩個參數：<code>start</code> 和 <code>end</code>，分別代表起始值與結束值。</p>
<p>使用 <code>range(start, end + 1)</code> 產生從起始值到結束值的數字序列。</p>
<p>使用 <code>sum()</code> 函數計算序列的總和並回傳結果。</p>
<p><strong>範例呼叫</strong>:</p>
<p><code>addto(1, 100)</code> 的結果是從 1 加到 100 的總和：5050。</p>
<p>題目三</p>
<p><a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/0a83bbfde3a2d6dbecaa9e84b80a9f8b/raw/b87754ead0719bf876ac55b6fd873ab1b27eaca5/w15-3">add_only_even</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義函式 add_only_even
def add_only_even(start, end):
    """
    計算從 start 到 end 的所有偶數總和
    :param start: 起始數字
    :param end: 結束數字
    :return: 偶數累加結果
    """
    return sum(i for i in range(start, end + 1) if i % 2 == 0)

# 測試函式
result = add_only_even(1, 100)
print(f"從 1 到 100 的偶數總和是：{result}")</pre>
<p></p>
<p>程式碼解釋與概要</p>
<p><strong>函式 <code>add_only_even</code></strong>:</p>
<p>接受兩個參數：<code>start</code> 和 <code>end</code>，分別代表起始值與結束值。</p>
<p>使用 <strong>生成式 (generator expression)</strong> 過濾出範圍內的偶數。</p>
<p>使用 <code>sum()</code> 函數計算偶數的總和並回傳結果。</p>
<p><strong>範例測試</strong>:</p>
<p>呼叫 <code>add_only_even(1, 100)</code>，結果是 1 到 100 的偶數總和：2550。</p>
<p>題目四</p>
<p><a href="https://miniature-space-umbrella-pjpjgqwwqwrwcwqv-8081.app.github.dev/content/Brython-1.html?src=https://gist.githubusercontent.com/shung0625/0a83bbfde3a2d6dbecaa9e84b80a9f8b/raw/02d58a20f63ba1d0478e1762de529d89ddc0900c/w15-4">add_avoid_8</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_avoid_8_even(start, end):
    """
    計算從 start 到 end 的整數累加結果，但避開數字中包含 '8' 的整數，並僅累加偶數
    :param start: 起始數字
    :param end: 結束數字
    :return: 累加結果（不包含數字帶 '8' 且僅偶數）
    """
    return sum(i for i in range(start, end + 1) if '8' not in str(i) and i % 2 == 0)

# 測試函式
result_even = add_avoid_8_even(1, 100)
print(f"從 1 到 100 的累加結果（避開數字中包含 '8' 且僅偶數）：{result_even}")
</pre>
<p></p>
<p>程式碼解釋與概要:</p>
<p><code>range(start, end + 1)</code>：生成從起始值到結束值的數字序列。</p>
<p>條件篩選：</p>
<p><code>i % 2 == 0</code>：篩選偶數。</p>
<p><code>'8' not in str(i)</code>：避開包含字符 <code>'8'</code> 的數字。</p>
<p><code>sum()</code> 計算符合條件的數字總和。</p>
<p></p>
<p>心得感想:透過這次的練習，學會了使用 <code>range()</code> 建立數列，並結合條件篩選出特定數字的方法，如避開數字中包含 <code>'8'</code> 或只處理偶數。運用 <code>if</code> 和 <code>sum()</code> 等語法讓程式邏輯更清晰。</p>
<p></p><h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>